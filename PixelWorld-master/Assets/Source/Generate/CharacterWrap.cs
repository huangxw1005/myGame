//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CharacterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Character), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("IsAlive", IsAlive);
		L.RegFunction("AddHP", AddHP);
		L.RegFunction("AddMP", AddMP);
		L.RegFunction("GetRadius", GetRadius);
		L.RegFunction("ActIdle", ActIdle);
		L.RegFunction("ActRun", ActRun);
		L.RegFunction("ActAttack", ActAttack);
		L.RegFunction("ActHit", ActHit);
		L.RegFunction("ActDie", ActDie);
		L.RegFunction("ResetValue", ResetValue);
		L.RegFunction("OnEventAttack", OnEventAttack);
		L.RegFunction("AddSkill", AddSkill);
		L.RegFunction("GetSkill", GetSkill);
		L.RegFunction("GetSkillByIdx", GetSkillByIdx);
		L.RegFunction("CastSkill", CastSkill);
		L.RegFunction("AddSummon", AddSummon);
		L.RegFunction("AttackEffect", AttackEffect);
		L.RegFunction("AddBuff", AddBuff);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("HP", get_HP, set_HP);
		L.RegVar("HPMax", get_HPMax, set_HPMax);
		L.RegVar("MP", get_MP, set_MP);
		L.RegVar("MPMax", get_MPMax, set_MPMax);
		L.RegVar("Speed", get_Speed, set_Speed);
		L.RegVar("DistSight", get_DistSight, set_DistSight);
		L.RegVar("DistAttack", get_DistAttack, set_DistAttack);
		L.RegVar("PropertyName", get_PropertyName, set_PropertyName);
		L.RegVar("Property", get_Property, set_Property);
		L.RegVar("PropertyBuf", get_PropertyBuf, set_PropertyBuf);
		L.RegVar("lstSkills", get_lstSkills, set_lstSkills);
		L.RegVar("dicSkills", get_dicSkills, set_dicSkills);
		L.RegVar("buffs", get_buffs, set_buffs);
		L.RegVar("ID", get_ID, set_ID);
		L.RegVar("ModelID", get_ModelID, set_ModelID);
		L.RegVar("Name", get_Name, set_Name);
		L.RegVar("IsControllable", get_IsControllable, set_IsControllable);
		L.RegVar("IsUser", get_IsUser, set_IsUser);
		L.RegVar("LastSummonID", get_LastSummonID, set_LastSummonID);
		L.RegVar("IsStun", get_IsStun, set_IsStun);
		L.RegVar("IsFrozen", get_IsFrozen, set_IsFrozen);
		L.RegVar("Animator", get_Animator, null);
		L.RegVar("CharcterState", get_CharcterState, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAlive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			bool o = obj.IsAlive();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddHP(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddMP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddMP(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRadius(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			float o = obj.GetRadius();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActIdle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			obj.ActIdle();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActRun(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			obj.ActRun();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActAttack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			obj.ActAttack();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActHit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			obj.ActHit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActDie(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			obj.ActDie();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.IEnumerator o = obj.ResetValue(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEventAttack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnEventAttack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Skill o = obj.AddSkill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Skill o = obj.GetSkill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillByIdx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Skill o = obj.GetSkillByIdx(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CastSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Skill o = obj.CastSkill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSummon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 4);
			SkillSummonInfo arg3 = (SkillSummonInfo)ToLua.CheckObject(L, 5, typeof(SkillSummonInfo));
			obj.AddSummon(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			UnityEngine.GameObject o = obj.AttackEffect(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Character obj = (Character)ToLua.CheckObject(L, 1, typeof(Character));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.HP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.HPMax;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HPMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.MP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MPMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.MPMax;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MPMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float ret = obj.Speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Speed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DistSight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float ret = obj.DistSight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DistSight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DistAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float ret = obj.DistAttack;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DistAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyName(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Character.PropertyName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Property(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Hashtable ret = obj.Property;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Property on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyBuf(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Hashtable ret = obj.PropertyBuf;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PropertyBuf on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lstSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.List<int> ret = obj.lstSkills;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lstSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dicSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.Dictionary<int,Skill> ret = obj.dicSkills;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dicSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_buffs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.List<Buff> ret = obj.buffs;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buffs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.ID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ModelID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.ModelID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ModelID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsControllable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool ret = obj.IsControllable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsControllable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUser(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool ret = obj.IsUser;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUser on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastSummonID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int ret = obj.LastSummonID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LastSummonID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStun(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool ret = obj.IsStun;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsStun on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFrozen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool ret = obj.IsFrozen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsFrozen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Animator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			UnityEngine.Animator ret = obj.Animator;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Animator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharcterState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			CharaterState ret = obj.CharcterState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharcterState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.HP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HPMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.HPMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HPMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MPMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MPMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MPMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Speed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DistSight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DistSight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DistSight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DistAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DistAttack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DistAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyName(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			Character.PropertyName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Property(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Hashtable arg0 = (System.Collections.Hashtable)ToLua.CheckObject(L, 2, typeof(System.Collections.Hashtable));
			obj.Property = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Property on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyBuf(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Hashtable arg0 = (System.Collections.Hashtable)ToLua.CheckObject(L, 2, typeof(System.Collections.Hashtable));
			obj.PropertyBuf = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PropertyBuf on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lstSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			obj.lstSkills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lstSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dicSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.Dictionary<int,Skill> arg0 = (System.Collections.Generic.Dictionary<int,Skill>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,Skill>));
			obj.dicSkills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dicSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_buffs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			System.Collections.Generic.List<Buff> arg0 = (System.Collections.Generic.List<Buff>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Buff>));
			obj.buffs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buffs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ModelID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ModelID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ModelID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsControllable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsControllable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsControllable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsUser(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsUser = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUser on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastSummonID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LastSummonID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LastSummonID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsStun(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsStun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsStun on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsFrozen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsFrozen = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsFrozen on a nil value" : e.Message);
		}
	}
}

